[{"D:\\data-science\\REACT\\chaingflix\\src\\index.js":"1","D:\\data-science\\REACT\\chaingflix\\src\\components\\App.js":"2","D:\\data-science\\REACT\\chaingflix\\src\\components\\GlobalStyles.js":"3","D:\\data-science\\REACT\\chaingflix\\src\\components\\Header.js":"4","D:\\data-science\\REACT\\chaingflix\\src\\components\\Router.js":"5","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Detail\\index.js":"6","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Home\\index.js":"7","D:\\data-science\\REACT\\chaingflix\\src\\routes\\TV\\index.js":"8","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Search\\index.js":"9","D:\\data-science\\REACT\\chaingflix\\src\\routes\\TV\\TvContainer.js":"10","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Detail\\DetailContainer.js":"11","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Home\\HomeContainer.js":"12","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Search\\SearchContainer.js":"13","D:\\data-science\\REACT\\chaingflix\\src\\routes\\TV\\TvPresenter.js":"14","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Detail\\DetailPresenter.js":"15","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Search\\SearchPresenter.js":"16","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Home\\HomePresenter.js":"17","D:\\data-science\\REACT\\chaingflix\\src\\api.js":"18","D:\\data-science\\REACT\\chaingflix\\src\\components\\Message.js":"19","D:\\data-science\\REACT\\chaingflix\\src\\components\\Loader.js":"20","D:\\data-science\\REACT\\chaingflix\\src\\components\\Section.js":"21","D:\\data-science\\REACT\\chaingflix\\src\\components\\Poster.js":"22"},{"size":157,"mtime":1606873657230,"results":"23","hashOfConfig":"24"},{"size":186,"mtime":1606877431719,"results":"25","hashOfConfig":"24"},{"size":583,"mtime":1606873504790,"results":"26","hashOfConfig":"24"},{"size":2076,"mtime":1606884377792,"results":"27","hashOfConfig":"24"},{"size":1164,"mtime":1606882576958,"results":"28","hashOfConfig":"24"},{"size":85,"mtime":1606876840656,"results":"29","hashOfConfig":"24"},{"size":79,"mtime":1606876819748,"results":"30","hashOfConfig":"24"},{"size":73,"mtime":1606876837487,"results":"31","hashOfConfig":"24"},{"size":85,"mtime":1606876830344,"results":"32","hashOfConfig":"24"},{"size":1499,"mtime":1606895817220,"results":"33","hashOfConfig":"24"},{"size":2316,"mtime":1606895004598,"results":"34","hashOfConfig":"24"},{"size":3417,"mtime":1606886453757,"results":"35","hashOfConfig":"24"},{"size":2671,"mtime":1606959226557,"results":"36","hashOfConfig":"24"},{"size":2563,"mtime":1606954359704,"results":"37","hashOfConfig":"24"},{"size":3344,"mtime":1606894247687,"results":"38","hashOfConfig":"24"},{"size":2839,"mtime":1606959638245,"results":"39","hashOfConfig":"24"},{"size":3090,"mtime":1606888800848,"results":"40","hashOfConfig":"24"},{"size":1245,"mtime":1606959031249,"results":"41","hashOfConfig":"24"},{"size":570,"mtime":1606883639006,"results":"42","hashOfConfig":"24"},{"size":399,"mtime":1606884191148,"results":"43","hashOfConfig":"24"},{"size":747,"mtime":1606883703704,"results":"44","hashOfConfig":"24"},{"size":1863,"mtime":1606883667220,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"corr91",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"48"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"D:\\data-science\\REACT\\chaingflix\\src\\index.js",[],["96","97"],"D:\\data-science\\REACT\\chaingflix\\src\\components\\App.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\GlobalStyles.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\Header.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\Router.js",["98"],"// 이 파일에서 router 관리\r\n// App.js 에서는 component 관리만 할 수 있도록\r\n// 따로 파일을 새로 만든 것. -> 기능의 분리!\r\nimport React from \"react\";\r\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\n// HashRouter 이름이 기니까 그냥 Router로 alias 해주자.\r\nimport Detail from \"../routes/Detail\";\r\nimport Home from \"../routes/Home\";\r\nimport Search from \"../routes/Search\";\r\nimport TV from \"../routes/TV\";\r\n\r\n// 오로지 router만 관리하는 component가 될 것이다.\r\nexport default () => (\r\n  <Router>\r\n    <>\r\n      <Header />\r\n      {/* 기본적으로 Switch가 없이 라우터를 배치하면\r\n      모든 라우터를 탄다.\r\n      Switch를 활용하면 오로지 하나의 라우터만 타게 된다. */}\r\n      <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/tv\" exact component={TV} />\r\n        <Route path=\"/search\" exact component={Search} />\r\n        <Route path=\"/movie/:id\" exact component={Detail} />\r\n        <Route path=\"/show/:id\" exact component={Detail} />\r\n      </Switch>\r\n    </>\r\n  </Router>\r\n);\r\n","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Detail\\index.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\Home\\index.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\TV\\index.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\Search\\index.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\TV\\TvContainer.js",["99","100"],"import React from \"react\";\r\nimport TvPresenter from \"./TvPresenter\";\r\nimport { tvApi } from \"../../api\";\r\n// container가 반드시 presenter가 포함\r\n// container가 presenter의 부모 컴포넌트\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    topRated: null,\r\n    popular: null,\r\n    airingToday: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  async componentDidMount() {\r\n    try {\r\n      const {\r\n        data: { results: topRated },\r\n      } = await tvApi.topRated();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await tvApi.popular();\r\n\r\n      const {\r\n        data: { results: airingToday },\r\n      } = await tvApi.airingToday();\r\n\r\n      console.log(topRated);\r\n      console.log(popular);\r\n      console.log(airingToday);\r\n\r\n      this.setState({\r\n        topRated,\r\n        popular,\r\n        airingToday,\r\n      });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"TV 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n  render() {\r\n    const { topRated, popular, airingToday, error, loading } = this.state;\r\n    return (\r\n      <TvPresenter\r\n        topRated={topRated}\r\n        popular={popular}\r\n        airingToday={airingToday}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n// 함수형 component의 return\r\n// -> class형 component에서는 render\r\n","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Detail\\DetailContainer.js",["101"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport DetailPresenter from \"./DetailPresenter\";\r\n// container가 반드시 presenter가 포함\r\n// container가 presenter의 부모 컴포넌트\r\n\r\nexport default class extends React.Component {\r\n  // class 형 component\r\n  // 생성자에서 할 일\r\n  // 영화 상세 페이지를 표현해야 하는지 설정\r\n\r\n  // detail을 한 파일에서 처리 -> /movie인지 /show 인지 path를 받아야 함\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    // 함수형 component의 return\r\n    // -> class형 component에서는 render\r\n\r\n    const {\r\n      location: { pathname },\r\n    } = props;\r\n\r\n    this.state = {\r\n      result: null,\r\n      error: null,\r\n      loading: true,\r\n      isMovie: pathname.includes(\"/movie/\"),\r\n    };\r\n  }\r\n\r\n  async componentDidMount() {\r\n    // match.params로부터 id 가지고 오기\r\n    // 만약에 id가 들어오지 X -> HOME으로 강제 이동 -> history의 push함수가 해준다.\r\n    // 과정 중요!\r\n    // 사용자의 요청을 서버가 받고, 재요청하도록 하는 것을 redirect라고 한다.\r\n\r\n    const {\r\n      match: {\r\n        params: { id },\r\n      },\r\n      history: { push },\r\n    } = this.props;\r\n\r\n    // id : 문자열\r\n    // -> 숫자로 바꿔야 함.\r\n    const { isMovie } = this.state;\r\n    const parseId = parseInt(id);\r\n    // 올바르지 않은 id라면\r\n    if (isNaN(parseId)) {\r\n      // Home으로 redirect\r\n      return push(\"/\");\r\n    }\r\n\r\n    let result = null;\r\n    // data를 뽑아서 result에 넣겠다는 이야기\r\n    // 우선 null\r\n\r\n    try {\r\n      if (isMovie) {\r\n        ({ data: result } = await moviesApi.movieDetail(parseId));\r\n      } else {\r\n        ({ data: result } = await tvApi.showDetail(parseId));\r\n      }\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"아무것도 찾을 수가 없어요\",\r\n      });\r\n    } finally {\r\n      this.setState({ loading: false, result });\r\n    }\r\n  }\r\n  render() {\r\n    const { result, error, loading } = this.state;\r\n    return <DetailPresenter result={result} error={error} loading={loading} />;\r\n  }\r\n}\r\n\r\n// 변수 key, 위치, 이름 다 신경써야 함.\r\n// state의 key 값이 result\r\n// 변수들의 이름도 result이니까\r\n// 그냥 {result}로 표시가능\r\n","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Home\\HomeContainer.js",["102","103"],"import React from \"react\";\r\nimport HomePresenter from \"./HomePresenter\";\r\nimport { moviesApi } from \"../../api\";\r\n// container가 반드시 presenter가 포함\r\n// container가 presenter의 부모 컴포넌트\r\n\r\n// Container의 역할 : Application에서 사용되어지는 기능(함수), 상태(state), 이벤트 등을 구현, Presenter에 전달\r\n\r\nexport default class extends React.Component {\r\n  // class형 component에서 state 만들기\r\n  state = {\r\n    nowPlaying: null,\r\n    upcoming: null,\r\n    popular: null,\r\n    error: null,\r\n    loading: true,\r\n  };\r\n  // constructor : 클래스 생성자\r\n  // 생성자의 매개변수로 부모 컴포넌트의 props가 들어온다.\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n\r\n  // component가 부모 component에 마운트 됐을 때 호출되는 함수\r\n  // useEffect(() => {}, [])와 같다.\r\n\r\n  // useEffect 에서의 비동기처리와는 다르게, class형 component의 componentDidMount에서의\r\n  // 비동기 처리는 앞에 sync 키워드를 붙여주면 된다.\r\n  // 어제의 비동기 처리, 오늘의 비동기 처리 다름.\r\n  async componentDidMount() {\r\n    try {\r\n      // data -> results에 원하는 내용이 있었음\r\n      // console로 확인했음\r\n      // data : {results : [{}, {}, {}...]} 식의 구조로 있었음\r\n      // unpacking 하면됨\r\n\r\n      // 새로운 unpacking 방법~\r\n      // data안에 있는 results에 들어있는 값을 nowPlaying 변수에 넣겠다는 의미.\r\n      // const nowPlaying = await moviesApi.nowPlaying().data.results;\r\n      // 이 코드와 똑같음.\r\n      const {\r\n        data: { results: nowPlaying },\r\n      } = await moviesApi.nowPlaying();\r\n      // data 안에 results 안에 있는 배열을 뽑아서\r\n      // nowPlaying 이라는 변수에 집어넣겠다.\r\n\r\n      const {\r\n        data: { results: upcoming },\r\n      } = await moviesApi.upcoming();\r\n\r\n      const {\r\n        data: { results: popular },\r\n      } = await moviesApi.popular();\r\n\r\n      // console.log(nowPlaying);\r\n      // console.log(upcoming);\r\n      // console.log(popular);\r\n      // 데이터 잘 불러와지는지 확인\r\n\r\n      this.setState({\r\n        nowPlaying,\r\n        upcoming,\r\n        popular,\r\n      });\r\n    } catch (error) {\r\n      // 객체로 들어가면 됨\r\n      this.setState({\r\n        error: \"영화 정보를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      // 에러가 나던/ 안 나던 항상 실행되는 코드\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  }\r\n  // 함수형 component의 return\r\n  // -> class형 component에서는 render\r\n  render() {\r\n    // 렌더링할 때 state 필요\r\n    // 윗 부분에 state = {nowPlaying: null, ,,,,,} 이렇게 묶여있음\r\n    // unpacking 필요\r\n\r\n    const { nowPlaying, upcoming, popular, error, loading } = this.state;\r\n    // 그냥 state 라고 쓰면 class용 변수가 아닌 함수용 변수.\r\n    // 명시적으로 this를 붙여줌.\r\n    // class에서 선언된 변수이구나. 라고 알려주는 키워드 : this.\r\n    return (\r\n      <HomePresenter\r\n        nowPlaying={nowPlaying}\r\n        upcoming={upcoming}\r\n        popular={popular}\r\n        error={error}\r\n        loading={loading}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// container -> 데이터, 기능에 대해서만 이야기\r\n// 화면에 보여지는 것에 대해서는 아무 이야기도 하지 X\r\n","D:\\data-science\\REACT\\chaingflix\\src\\routes\\Search\\SearchContainer.js",["104","105"],"import React from \"react\";\r\nimport { moviesApi, tvApi } from \"../../api\";\r\nimport SearchPresenter from \"./SearchPresenter\";\r\n// container가 반드시 presenter가 포함\r\n// container가 presenter의 부모 컴포넌트\r\n\r\nexport default class extends React.Component {\r\n  state = {\r\n    movieResults: null,\r\n    tvResults: null,\r\n    searchTerm: \"\",\r\n    error: null,\r\n    loading: false,\r\n  };\r\n\r\n  // submit\r\n  handleSubmit = (event) => {\r\n    // form에서 submit이 작동은 하는데, 원래 하고자 했던 이벤트를 취소한다. (중요!)\r\n    // 그래서 원래 form이 하려고 했던 이벤트를 알고 있어야 함.\r\n    event.preventDefault();\r\n    const { searchTerm } = this.state;\r\n\r\n    if (searchTerm !== \"\") {\r\n      this.searchByTerm();\r\n    }\r\n    // searchTerm이 비워있지 않는 경우.\r\n  };\r\n\r\n  // update -> onChange에서 일어날 이벤트\r\n  updateTerm = (event) => {\r\n    const {\r\n      target: { value: searchTerm },\r\n    } = event;\r\n\r\n    this.setState({ searchTerm });\r\n  };\r\n\r\n  // search -> 검색어를 넣은 api 호출\r\n  // event가 일어났을 때 비동기적으로 호출 -> async 앞에 붙여주기\r\n  searchByTerm = async () => {\r\n    // 1. 검색어 가져오기\r\n    const { searchTerm } = this.state;\r\n\r\n    // 2. loading 설정하기\r\n    this.setState({ loading: true });\r\n\r\n    // 3. 실제 api 호출\r\n    // data의 응답 형태 : {data:{results:[{},{},{},,,]}} 형태로 있음 -> unpacking 필요\r\n    try {\r\n      // moviesApi.search -> movieResults 에 담기\r\n      // tvApi.search -> tvResults에 담기\r\n\r\n      // unpacking 기법을 활용해서\r\n      const {\r\n        data: { results: movieResults },\r\n      } = await moviesApi.search(searchTerm);\r\n      // state에 의해 바뀌어진 검색어(searchTerm) 대입\r\n\r\n      const {\r\n        data: { results: tvResults },\r\n      } = await tvApi.search(searchTerm);\r\n\r\n      this.setState({ movieResults, tvResults });\r\n    } catch (error) {\r\n      this.setState({\r\n        error: \"결과를 찾을 수 없습니다.\",\r\n      });\r\n    } finally {\r\n      this.setState({\r\n        loading: false,\r\n      });\r\n    }\r\n  };\r\n\r\n  constructor(props) {\r\n    super(props);\r\n  }\r\n  // 함수형 component의 return\r\n  // -> class형 component에서는 render\r\n  render() {\r\n    const { movieResults, tvResults, searchTerm, error, loading } = this.state;\r\n    return (\r\n      <SearchPresenter\r\n        movieResults={movieResults}\r\n        tvResults={tvResults}\r\n        searchTerm={searchTerm}\r\n        error={error}\r\n        loading={loading}\r\n        handleSubmit={this.handleSubmit}\r\n        updateTerm={this.updateTerm}\r\n      />\r\n    );\r\n  }\r\n}\r\n","D:\\data-science\\REACT\\chaingflix\\src\\routes\\TV\\TvPresenter.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\Detail\\DetailPresenter.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\Search\\SearchPresenter.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\routes\\Home\\HomePresenter.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\api.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\Message.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\Loader.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\Section.js",[],"D:\\data-science\\REACT\\chaingflix\\src\\components\\Poster.js",[],{"ruleId":"106","replacedBy":"107"},{"ruleId":"108","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":14,"column":1,"nodeType":"112","endLine":30,"endColumn":3},{"ruleId":"110","severity":1,"message":"113","line":7,"column":1,"nodeType":"112","endLine":65,"endColumn":2},{"ruleId":"114","severity":1,"message":"115","line":16,"column":3,"nodeType":"116","messageId":"117","endLine":18,"endColumn":4},{"ruleId":"110","severity":1,"message":"113","line":7,"column":1,"nodeType":"112","endLine":76,"endColumn":2},{"ruleId":"110","severity":1,"message":"113","line":9,"column":1,"nodeType":"112","endLine":98,"endColumn":2},{"ruleId":"114","severity":1,"message":"115","line":20,"column":3,"nodeType":"116","messageId":"117","endLine":22,"endColumn":4},{"ruleId":"110","severity":1,"message":"113","line":7,"column":1,"nodeType":"112","endLine":94,"endColumn":2},{"ruleId":"114","severity":1,"message":"115","line":75,"column":3,"nodeType":"116","messageId":"117","endLine":77,"endColumn":4},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"import/no-anonymous-default-export","Assign arrow function to a variable before exporting as module default","ExportDefaultDeclaration","Unexpected default export of anonymous class","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]